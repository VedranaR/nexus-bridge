<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="04/05/2016 12:46:11"
   UPDATED_BY="SIEBEL"
   CREATED="04/05/2016 12:23:39"
   CREATED_BY="SIEBEL"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LANGUAGE_LOCKED="ENU"
	   LOCKED="Y"
	   LOCKED_DATE="07/20/2017 09:18:02"
	   NAME="COM Workflows"
	   UI_FREEZE="N"
	   LOCKED_BY_NAME="SADMIN"
	   UPDATED="12/17/2018 07:41:45"
	   UPDATED_BY="SADMIN"
	   CREATED="12/21/2003 05:26:55"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="N19 BS"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="12/17/2018 07:41:41"
		   UPDATED_BY="SADMIN"
		   CREATED="11/07/2018 11:02:21"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (&quot;DeleteSalesRep&quot; === MethodName) 
	{
		return deleteSalesRep(Inputs, Outputs);
	}
	else if (&quot;Refresh&quot; === MethodName) 
	{
		return refresh(Inputs, Outputs);
	}
	else if (&quot;Requery&quot; === MethodName) 
	{
		return requery(Inputs, Outputs);
	}
	else if (&quot;GetSalesRep&quot; === MethodName) 
	{
		try
		{
			var oBOActive : BusObject = TheApplication().ActiveBusObject();
			if (oBOActive)
			{
				var oBCActive : BusComp = oBOActive.GetBusComp(&quot;HLS Case&quot;);
				var csId = oBCActive.GetFieldValue(&quot;Id&quot;);

				var oBO : BusObject = TheApplication().GetBusObject(&quot;HLS Case&quot;);
				var oBC : BusComp = oBO.GetBusComp(&quot;PUB Appeal Case&quot;);
				oBC.ClearToQuery();
				oBC.SetViewMode(AllView);
				oBC.SetSearchSpec(&quot;Id&quot;, csId);
				oBC.ExecuteQuery(ForwardOnly);
				if (!oBC.FirstRecord())
				{
					TheApplication().RaiseErrorText(&quot;Case is not found - &quot; + csId);					
				}
				var oMvgBC : BusComp = oBC.GetMVGBusComp(&quot;Sales Rep&quot;);
				var bIsRecord = oMvgBC.FirstRecord();
				ps = TheApplication().NewPropertySet();
				while (bIsRecord) 
				{
					ps.Reset()
					ps.SetProperty(&quot;Login&quot;, oMvgBC.GetFieldValue(&quot;Active Login Name&quot;));
					ps.SetProperty(&quot;First&quot;, oMvgBC.GetFieldValue(&quot;First Name&quot;));
					ps.SetProperty(&quot;Last&quot;, oMvgBC.GetFieldValue(&quot;Last Name&quot;));
					ps.SetProperty(&quot;Primary&quot;, oMvgBC.GetFieldValue(&quot;SSA Primary Field&quot;));
					ps.SetProperty(&quot;Id&quot;, oMvgBC.GetFieldValue(&quot;Id&quot;));
					Outputs.AddChild(ps.Copy());
					bIsRecord = oMvgBC.NextRecord();
				}

			}
			else
			{
				TheApplication().RaiseErrorText(&quot;No active business object&quot;);
			}
		}
		finally
		{
			var ps = null;
			oMvgBC = null;
			oBC = null;
			oBO = null;
		}
		return(CancelOperation);
	}
	return (ContinueOperation);
}"
			   SEQUENCE="4"
			   UPDATED="12/17/2018 07:41:41"
			   UPDATED_BY="SADMIN"
			   CREATED="11/07/2018 11:02:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="deleteSalesRep"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function deleteSalesRep(Inputs, Outputs)
{
	try
	{
		var oBO : BusObject = TheApplication().ActiveBusObject();
		if (oBO)
		{
			var csId = Inputs.GetProperty(&quot;Id&quot;);
			if (&quot;&quot; === csId)
			{
				TheApplication().RaiseErrorText(&quot;N19 BS: Id is empty&quot;);
			}
			var oBC : BusComp = oBO.GetBusComp(&quot;HLS Case&quot;);
			var oMvgBC : BusComp = oBC.GetMVGBusComp(&quot;Sales Rep&quot;);
			oMvgBC.ClearToQuery();
			oMvgBC.SetSearchSpec(&quot;Id&quot;, csId);
			oMvgBC.ExecuteQuery(ForwardBackward);
			if (oMvgBC.FirstRecord())
			{
				oMvgBC.DeleteRecord();
			}
			oMvgBC.ClearToQuery();
			oMvgBC.ExecuteQuery(ForwardBackward);

		}
		else
		{
			TheApplication().RaiseErrorText(&quot;No active business object&quot;);
		}
	}
	finally
	{
		oMvgBC = null;
		oBC = null;
		oBO = null;
	}
	return(CancelOperation);
}"
			   SEQUENCE="1"
			   UPDATED="12/17/2018 07:41:41"
			   UPDATED_BY="SADMIN"
			   CREATED="11/08/2018 09:58:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="refresh"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function refresh(Inputs, Outpus)
{
	var csName : chars = Inputs.GetProperty(&quot;name&quot;);

	if (csName != &quot;&quot;)
	{
		var oBO : BusObject = TheApplication().ActiveBusObject();
		try
		{
			if (oBO)
			{
				var oBC : BusComp = oBO.GetBusComp(csName);
				oBC.InvokeMethod(&quot;RefreshBusComp&quot;);
			}
		}
		finally
		{
			oBC = null;
			oBO = null;
		}
	}

	return(CancelOperation);

}
"
			   SEQUENCE="2"
			   UPDATED="12/17/2018 07:41:41"
			   UPDATED_BY="SADMIN"
			   CREATED="11/12/2018 18:46:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="requery"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function requery(Inputs, Outpus)
{
	var csName : chars = Inputs.GetProperty(&quot;name&quot;);

	if (csName != &quot;&quot;)
	{
		var oBO : BusObject = TheApplication().ActiveBusObject();
		try
		{
			if (oBO)
			{
				var oBC : BusComp = oBO.GetBusComp(csName);
				oBC.ClearToQuery();
				oBC.ExecuteQuery(ForwardBackward);
			}
		}
		finally
		{
			oBC = null;
			oBO = null;
		}
	}

	return(CancelOperation);

}
"
			   SEQUENCE="3"
			   UPDATED="12/17/2018 07:41:41"
			   UPDATED_BY="SADMIN"
			   CREATED="11/12/2018 18:55:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



